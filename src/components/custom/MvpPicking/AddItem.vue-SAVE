<template>
  <div>
    <div>Depuis la liste :</div>
    <div v-if="loaded" class="">
      <div v-if="!noProducts">
        <q-expansion-item
          expand-separator
          icon="dynamic_form"
          label="Liste des produits"
          class="bg-grey-3"
        >
          <q-list>
            <q-card
              v-for="(product, index) in cleanProductsList"
              :key="product.id"
              :product_index="index"
              @click="activate(index)"
              class="product-card q-pa-sm"
              unelevated
              square
              flat
              bordered
              :active="active"
            >
              {{ product.title }}
            </q-card>
          </q-list>
        </q-expansion-item>
      </div>
      <div v-else class="">
        <q-banner rounded class="text-white bg-red-5 q-pa-sm">
          <template v-slot:avatar>
            <q-icon name="warning" color="white" />
          </template>
          Aucun produit référencé pour ce fournisseur
        </q-banner>
      </div>
    </div>
    <div class="q-mt-md">Ou directement :</div>
    <div>
      <q-input
        standout="bg-primary text-white"
        v-model="inputText"
        label="Nom du produit"
        bg-color="grey-3"
      />
    </div>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'AddItem',
  props: {
    selectRef: {
      type: String
    },
    supplierName: {
      type: String,
      required: true
    }
  },
  data() {
    return {
      loaded: false,
      queryProductsList: {
        size: 500,
        sort: [
          {
            updated_at: {
              order: 'desc',
              unmapped_type: 'boolean'
            }
          }
        ],
        query: {
          bool: {
            must: [],
            filter: [
              {
                multi_match: {
                  type: 'phrase',
                  query: '',
                  lenient: true
                }
              }
            ]
          }
        }
      },
      fullProductsList: null,
      cleanProductsList: null,
      inputText: '',
      noProducts: true,
      active: false
    }
  },
  methods: {
    async getProductsList() {
      this.$q.loading.show()
      await this.requestProductsList()
      this.$q.loading.hide()

      // do things
      console.log('ou est ce que je me trouve dans les logs ?')
    },
    requestProductsList() {
      var url =
        this.$store.getters.apiurl +
        'generic_search/product*?token=' +
        this.$store.getters.creds.token
      console.log('url : ', url)

      this.queryProductsList.query.bool.filter[0].multi_match.query = this.supplierName

      axios
        .post(url, this.queryProductsList, {
          headers: { 'Content-Type': 'application/json' }
        })
        .then(response => {
          this.fullProductsList = response.data.records
          console.log(' recu liste de produits : ', this.fullProductsList)
          this.prepareProducts()

          // post treatment
          if (this.cleanProductsList !== null) {
            console.log(
              'on a une liste de produits "propre": ',
              this.cleanProductsList
            )
          } else {
            console.log(
              'il n y a aucun produits enregistré pour ce fournisseur'
            )
          }
          this.loaded = true
        })
        .catch(error => {
          console.log(
            '| requestProductsList / POST | UN PROBLEME EST SURVENU : ',
            error
          )
        })
    },
    prepareProducts() {
      if (this.fullProductsList.length == 0) {
        // this.noProducts = true;
        return
      }
      var array = []
      for (var i = 0; i < this.fullProductsList.length; i++) {
        array[i] = this.fullProductsList[i]._source
      }

      array.sort(function(a, b) {
        var nameA = a.title.toLowerCase(),
          nameB = b.title.toLowerCase()
        if (nameA < nameB) return -1
        if (nameA > nameB) return 1
        return 0
      })
      this.cleanProductsList = array
      if (this.cleanProductsList.length > 0) this.noProducts = false
    },
    addThisProduct(index) {
      // console.log(
      //   'je veux ajouter un produit !!!!',
      //   this.cleanProductsList[index].title
      // )
      this.$emit('addProduct', { data: this.cleanProductsList[index].title })
    },
    activate(index) {
      // addThisProduct(index)
      console.log("coucou je tente d'activer une carte")
      this.active = true
    }
  },
  created() {},
  mounted() {
    this.getProductsList()
  },
  updated() {},
  computed: {}
}
</script>

<style>
.product-card {
  font-size: 1.3em;
}
</style>
